from pybit.unified_trading import WebSocket, HTTP
from time import sleep
import json
from config import DEMO_API_KEY, DEMO_API_SECRET

session = HTTP(testnet=False, api_key=DEMO_API_KEY, api_secret=DEMO_API_SECRET, demo=True)
ws = WebSocket(testnet=False, channel_type="linear")


class ShortAveragingStrategy:
    def __init__(self, symbol, usdt_amount, averaging_percent=10.0, initial_tp_percent=3.0, 
                 breakeven_step=2.0, stop_loss_percent=15.0):
        """
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏–π —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º
        
        :param symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
        :param usdt_amount: –°—É–º–º–∞ –≤ USDT –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        :param averaging_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%)
        :param initial_tp_percent: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3%)
        :param breakeven_step: –®–∞–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–µ–∑—É–±—ã—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2%)
        :param stop_loss_percent: –°—Ç–æ–ø-–ª–æ—Å—Å –ø–æ—Å–ª–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15%)
        """
        self.symbol = symbol.upper()
        self.usdt_amount = usdt_amount
        self.averaging_percent = averaging_percent
        self.initial_tp_percent = initial_tp_percent
        self.breakeven_step = breakeven_step
        self.stop_loss_percent = stop_loss_percent
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –∏ –ø—Ä–∞–≤–∏–ª–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        self.qty_precision = None
        self.min_qty = None
        self.max_qty = None
        self._load_symbol_info()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        self.position_qty = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏
        self.entry_price = None  # –¶–µ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
        self.averaged_price = None  # –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
        self.is_averaged = False  # –§–ª–∞–≥ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        self.averaging_order_id = None  # ID –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ –±–µ–∑—É–±—ã—Ç–∫–∞
        self.tp_price = None  # –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        self.breakeven_price = None  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–∫–∞
        self.best_profit_percent = 0  # –õ—É—á—à–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.position_opened = False
        self.stop_loss_price = None
        
        # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
        self.open_attempts = 0
        self.max_open_attempts = 5
        self.failed_to_open = False
        self.last_error = None

    def _load_symbol_info(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            response = session.get_instruments_info(
                category="linear",
                symbol=self.symbol
            )
            
            if response.get('retCode') == 0:
                instruments = response.get('result', {}).get('list', [])
                if len(instruments) > 0:
                    instrument = instruments[0]
                    lot_size_filter = instrument.get('lotSizeFilter', {})
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    qty_step = float(lot_size_filter.get('qtyStep', '0.01'))
                    self.min_qty = float(lot_size_filter.get('minOrderQty', '0.01'))
                    self.max_qty = float(lot_size_filter.get('maxOrderQty', '1000000'))
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    self.qty_precision = len(str(qty_step).rstrip('0').split('.')[-1])
                    
                    print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ {self.symbol}:")
                    print(f"   –®–∞–≥ qty: {qty_step}")
                    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {self.qty_precision} –∑–Ω–∞–∫–æ–≤")
                    print(f"   –ú–∏–Ω. qty: {self.min_qty}")
                    print(f"   –ú–∞–∫—Å. qty: {self.max_qty}")
                else:
                    print(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {self.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    self.qty_precision = 3
                    self.min_qty = 0.001
                    self.max_qty = 1000000
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {response.get('retMsg')}")
                self.qty_precision = 3
                self.min_qty = 0.001
                self.max_qty = 1000000
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {e}")
            self.qty_precision = 3
            self.min_qty = 0.001
            self.max_qty = 1000000

    def calculate_qty(self, price):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Å—É–º–º—É USDT"""
        qty = self.usdt_amount / price
        
        # –û–∫—Ä—É–≥–ª—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–∏–º–≤–æ–ª–∞
        if self.qty_precision is not None:
            qty = round(qty, self.qty_precision)
        else:
            qty = round(qty, 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if self.min_qty and qty < self.min_qty:
            print(f"‚ö†Ô∏è Qty {qty} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {self.min_qty}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ")
            qty = self.min_qty
        
        if self.max_qty and qty > self.max_qty:
            print(f"‚ö†Ô∏è Qty {qty} –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ {self.max_qty}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ")
            qty = self.max_qty
        
        return qty

    def check_position_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            response = session.get_positions(
                category="linear",
                symbol=self.symbol
            )
            
            if response.get('retCode') == 0:
                positions = response.get('result', {}).get('list', [])
                for pos in positions:
                    size = float(pos.get('size', 0))
                    if size > 0:
                        return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False

    def open_short_position(self, current_price):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if self.open_attempts >= self.max_open_attempts:
            if not self.failed_to_open:
                self.failed_to_open = True
                print(f"‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚ùå‚ùå‚ùå")
                print(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {self.max_open_attempts}")
                print(f"üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {self.last_error}")
                print(f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print(f"   1. –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)")
                print(f"   2. –°–∏–º–≤–æ–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ demo-–∞–∫–∫–∞—É–Ω—Ç–µ")
                print(f"   3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                print(f"   4. –°–∏–º–≤–æ–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏–∏")
                print(f"   5. –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (qty) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–∏–º–≤–æ–ª–∞")
                print(f"   6. –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞ USDT –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
                print(f"üõë –ê–ª–≥–æ—Ä–∏—Ç–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
        
        try:
            self.open_attempts += 1
            qty = self.calculate_qty(current_price)
            
            print(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ #{self.open_attempts}/{self.max_open_attempts} - –û—Ç–∫—Ä—ã–≤–∞–µ–º –®–û–†–¢ –ø–æ–∑–∏—Ü–∏—é...")
            print(f"üí∞ –°—É–º–º–∞: {self.usdt_amount} USDT")
            print(f"üìä –¶–µ–Ω–∞: {current_price:.2f}")
            print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty} (—Ç–æ—á–Ω–æ—Å—Ç—å: {self.qty_precision} –∑–Ω–∞–∫–æ–≤)")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—é
            order = session.place_order(
                category="linear",
                symbol=self.symbol,
                side="Sell",  # Sell –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç–∞
                orderType="Market",
                qty=qty,
            )
            
            if order.get('retCode') == 0:
                self.entry_price = current_price
                self.position_qty = qty
                self.position_opened = True
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (–¥–ª—è —à–æ—Ä—Ç–∞ —ç—Ç–æ –ù–ò–ñ–ï)
                self.tp_price = self.entry_price * (1 - self.initial_tp_percent / 100)
                
                print(f"‚úÖ –®–û–†–¢ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!")
                print(f"üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {self.entry_price:.2f}")
                print(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {self.tp_price:.2f} (-{self.initial_tp_percent}%)")
                
                # –°—Ä–∞–∑—É –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ (+10% –æ—Ç –≤—Ö–æ–¥–∞ –¥–ª—è —à–æ—Ä—Ç–∞ —ç—Ç–æ –≤—ã—à–µ)
                self.place_averaging_order()
                
                return True
            else:
                error_msg = order.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                self.last_error = error_msg
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {self.open_attempts}/{self.max_open_attempts}): {error_msg}")
                return False
                
        except Exception as e:
            self.last_error = str(e)
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {self.open_attempts}/{self.max_open_attempts}): {e}")
            return False

    def place_averaging_order(self):
        """–í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ (+10% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞)"""
        try:
            # –î–ª—è —à–æ—Ä—Ç–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –í–´–®–ï (+10%)
            averaging_price = self.entry_price * (1 + self.averaging_percent / 100)
            qty = self.calculate_qty(averaging_price)
            
            print(f"üìù –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ...")
            print(f"üí∞ –¶–µ–Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {averaging_price:.2f} (+{self.averaging_percent}%)")
            print(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty} (–æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ {self.qty_precision} –∑–Ω–∞–∫–æ–≤)")
            
            order = session.place_order(
                category="linear",
                symbol=self.symbol,
                side="Sell",  # Sell –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏–∏
                orderType="Limit",
                qty=qty,
                price=averaging_price,
            )
            
            if order.get('retCode') == 0:
                self.averaging_order_id = order.get('result', {}).get('orderId')
                print(f"‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω! ID: {self.averaging_order_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    def check_averaging_order_filled(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ"""
        try:
            if not self.averaging_order_id:
                return False
                
            response = session.get_open_orders(
                category="linear",
                symbol=self.symbol,
                orderId=self.averaging_order_id
            )
            
            if response.get('retCode') == 0:
                orders = response.get('result', {}).get('list', [])
                # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö, –∑–Ω–∞—á–∏—Ç –æ–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                if len(orders) == 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω
                    history = session.get_order_history(
                        category="linear",
                        symbol=self.symbol,
                        orderId=self.averaging_order_id
                    )
                    
                    if history.get('retCode') == 0:
                        orders_hist = history.get('result', {}).get('list', [])
                        if len(orders_hist) > 0:
                            order_status = orders_hist[0].get('orderStatus')
                            if order_status == 'Filled':
                                return True
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    def apply_averaging(self, current_price):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è"""
        try:
            print(f"üéØ –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ!")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É
            # –î–ª—è —à–æ—Ä—Ç–∞: (entry_price * qty1 + averaging_price * qty2) / (qty1 + qty2)
            averaging_price = self.entry_price * (1 + self.averaging_percent / 100)
            new_qty = self.calculate_qty(averaging_price)
            
            total_qty = self.position_qty + new_qty
            self.averaged_price = (self.entry_price * self.position_qty + averaging_price * new_qty) / total_qty
            self.position_qty = total_qty
            self.is_averaged = True
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å (–¥–ª—è —à–æ—Ä—Ç–∞ —ç—Ç–æ –í–´–®–ï —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã)
            self.stop_loss_price = self.averaged_price * (1 + self.stop_loss_percent / 100)
            
            # –ù–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
            self.tp_price = self.averaged_price * (1 - self.initial_tp_percent / 100)
            self.best_profit_percent = 0
            self.breakeven_price = None
            
            print(f"üíµ –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {self.averaged_price:.2f}")
            print(f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {self.stop_loss_price:.2f} (+{self.stop_loss_percent}%)")
            print(f"üéØ –ù–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {self.tp_price:.2f} (-{self.initial_tp_percent}%)")
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.position_qty}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {e}")
            return False

    def update(self, current_price):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if not self.position_opened:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ
        if not self.check_position_exists():
            print(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return "STOP"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        base_price = self.averaged_price if self.is_averaged else self.entry_price
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å –¥–ª—è —à–æ—Ä—Ç–∞ (entry - current) / entry * 100
        profit_percent = (base_price - current_price) / base_price * 100
        
        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        pnl_emoji = "üìà" if profit_percent >= 0 else "üìâ"
        print(f"üí∞ –¶–µ–Ω–∞: {current_price:.2f} | {pnl_emoji} PnL: {profit_percent:+.2f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è)
        if self.is_averaged and self.stop_loss_price:
            if current_price >= self.stop_loss_price:
                print(f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª! –¶–µ–Ω–∞: {current_price:.2f} >= {self.stop_loss_price:.2f}")
                return "CLOSE"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        if not self.is_averaged and self.check_averaging_order_filled():
            self.apply_averaging(current_price)
        
        # –õ–æ–≥–∏–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ –±–µ–∑—É–±—ã—Ç–∫–∞
        if profit_percent >= self.initial_tp_percent:
            # –î–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            if not self.breakeven_price:
                # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–æ—Å—Ç–∏–≥–ª–∏ TP - —Å—Ç–∞–≤–∏–º –±–µ–∑—É–±—ã—Ç–æ–∫ –ù–ê –≠–¢–ò –ñ–ï 3%
                self.breakeven_price = base_price * (1 - self.initial_tp_percent / 100)
                self.best_profit_percent = profit_percent
                print(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç {self.initial_tp_percent}%!")
                print(f"üîí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–µ–∑—É–±—ã—Ç–æ–∫ –Ω–∞ {self.initial_tp_percent}%: {self.breakeven_price:.2f}")
            else:
                # –£–∂–µ –≤ –±–µ–∑—É–±—ã—Ç–∫–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–≥ –≤ 2%
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –∫–∞–∫—É—é —Ç–æ—á–∫—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑—É–±—ã—Ç–æ–∫
                steps_passed = int((profit_percent - self.initial_tp_percent) / self.breakeven_step)
                target_breakeven_percent = self.initial_tp_percent + steps_passed * self.breakeven_step
                new_breakeven = base_price * (1 - target_breakeven_percent / 100)
                
                if new_breakeven < self.breakeven_price:  # –î–ª—è —à–æ—Ä—Ç–∞ –±–µ–∑—É–±—ã—Ç–æ–∫ –¥–≤–∏–≥–∞–µ—Ç—Å—è –í–ù–ò–ó
                    self.breakeven_price = new_breakeven
                    self.best_profit_percent = profit_percent
                    print(f"üìà –ë–µ–∑—É–±—ã—Ç–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ {target_breakeven_percent:.1f}%: {self.breakeven_price:.2f} (–¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –±–µ–∑—É–±—ã—Ç–∫–∞
        if self.breakeven_price and current_price >= self.breakeven_price:
            print(f"üîí –ë–µ–∑—É–±—ã—Ç–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–ª! –¶–µ–Ω–∞: {current_price:.2f} >= {self.breakeven_price:.2f}")
            return "CLOSE"
        
        return None

    def cancel_averaging_order(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if not self.averaging_order_id:
            return True
        
        max_attempts = 3
        for attempt in range(1, max_attempts + 1):
            try:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –æ—Ç–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä...")
                response = session.cancel_order(
                    category="linear",
                    symbol=self.symbol,
                    orderId=self.averaging_order_id
                )
                
                if response.get('retCode') == 0:
                    print(f"‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
                    return True
                else:
                    error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ —Ç–æ–∂–µ —É—Å–ø–µ—Ö (–æ–Ω —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)
                    if 'not exists' in error_msg.lower() or 'not found' in error_msg.lower():
                        print(f"‚ÑπÔ∏è –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω)")
                        return True
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: {error_msg}")
                    
            except Exception as e:
                error_str = str(e)
                if 'not exists' in error_str.lower() or 'not found' in error_str.lower():
                    print(f"‚ÑπÔ∏è –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return True
                print(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
            
            if attempt < max_attempts:
                sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ä–¥–µ—Ä –≤–æ–æ–±—â–µ
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ...")
        
        try:
            response = session.get_open_orders(
                category="linear",
                symbol=self.symbol,
                orderId=self.averaging_order_id
            )
            
            if response.get('retCode') == 0:
                orders = response.get('result', {}).get('list', [])
                if len(orders) == 0:
                    print(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö - –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ")
                    return True
                else:
                    print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Ä–¥–µ—Ä –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ!")
                    print(f"‚ö†Ô∏è ID –æ—Ä–¥–µ—Ä–∞: {self.averaging_order_id}")
                    print(f"‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é!")
                    return False
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    def close_position(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é"""
        try:
            print(f"üö® –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é...")
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if not self.is_averaged and self.averaging_order_id:
                self.cancel_averaging_order()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç–∞ –Ω—É–∂–µ–Ω Buy)
            order = session.place_order(
                category="linear",
                symbol=self.symbol,
                side="Buy",
                orderType="Market",
                qty=self.position_qty,
            )
            
            if order.get('retCode') == 0:
                print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {order.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False

    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏"""
        self.position_qty = 0
        self.entry_price = None
        self.averaged_price = None
        self.is_averaged = False
        self.averaging_order_id = None
        self.tp_price = None
        self.breakeven_price = None
        self.best_profit_percent = 0
        self.position_opened = False
        self.stop_loss_price = None
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ)
        self.open_attempts = 0
        self.failed_to_open = False
        self.last_error = None
        
        print(f"üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—à–µ–Ω–∞, –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Å–∏–º–≤–æ–ª, —Å—É–º–º–∞ –≤ USDT, % —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è, % TP, —à–∞–≥ –±–µ–∑—É–±—ã—Ç–∫–∞, % SL
strategy = ShortAveragingStrategy(
    symbol="1000ratsusdt",
    usdt_amount=100,  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤ USDT
    averaging_percent=10.0,
    initial_tp_percent=3.0,
    breakeven_step=2.0,
    stop_loss_percent=15.0
)


def handle_message(message):
    global should_stop
    
    try:
        if 'data' in message:
            data = message['data']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = float(data.get('lastPrice', 0))
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞)
            if not strategy.position_opened and not strategy.failed_to_open:
                if strategy.open_short_position(current_price):
                    print(f"‚úÖ –®–û–†–¢ –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!")
                else:
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
                    if strategy.failed_to_open:
                        should_stop = True
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            action = strategy.update(current_price)
            
            if action == "CLOSE":
                print(f"üö® –£–°–õ–û–í–ò–ï –ó–ê–ö–†–´–¢–ò–Ø –°–†–ê–ë–û–¢–ê–õ–û!")
                if strategy.close_position():
                    strategy.reset()
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–∏–±–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞, –ª–∏–±–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                    # –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
                    should_stop = True
                    
            elif action == "STOP":
                print(f"‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú –û–°–¢–ê–ù–û–í–õ–ï–ù (–ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é)")
                strategy.reset()
                should_stop = True
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if hasattr(handle_message, 'counter'):
                handle_message.counter += 1
            else:
                handle_message.counter = 1
            
            if handle_message.counter % 10 == 0:
                status_info = f"üîß –°—Ç–∞—Ç—É—Å: "
                if strategy.position_opened:
                    base_price = strategy.averaged_price if strategy.is_averaged else strategy.entry_price
                    profit = (base_price - current_price) / base_price * 100
                    
                    status_info += f"–ü–æ–∑–∏—Ü–∏—è –û–¢–ö–†–´–¢–ê (–®–û–†–¢)"
                    status_info += f", –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ={'–î–ê' if strategy.is_averaged else '–ù–ï–¢'}"
                    status_info += f", PnL={profit:+.2f}%"
                    
                    if strategy.breakeven_price:
                        status_info += f", –ë–µ–∑—É–±—ã—Ç–æ–∫={strategy.breakeven_price:.2f}"
                    if strategy.is_averaged and strategy.stop_loss_price:
                        status_info += f", SL={strategy.stop_loss_price:.2f}"
                else:
                    status_info += "–ü–æ–∑–∏—Ü–∏—è –ó–ê–ö–†–´–¢–ê"
                    
                print(status_info)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
should_stop = False

# –ó–∞–ø—É—Å–∫ WebSocket —Å—Ç—Ä–∏–º–∞
ws.ticker_stream(strategy.symbol, handle_message)

print("=" * 60)
print("ü§ñ –°–¢–†–ê–¢–ï–ì–ò–Ø –®–û–†–¢ –° –£–°–†–ï–î–ù–ï–ù–ò–ï–ú –ó–ê–ü–£–©–ï–ù–ê")
print("=" * 60)
print(f"üìä –°–∏–º–≤–æ–ª: {strategy.symbol}")
print(f"üí∞ –°—É–º–º–∞ –Ω–∞ —Å–¥–µ–ª–∫—É: {strategy.usdt_amount} USDT")
print(f"üìè –¢–æ—á–Ω–æ—Å—Ç—å qty: {strategy.qty_precision} –∑–Ω–∞–∫–æ–≤ (–º–∏–Ω: {strategy.min_qty}, –º–∞–∫—Å: {strategy.max_qty})")
print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {strategy.averaging_percent}%")
print(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {strategy.initial_tp_percent}%")
print(f"üîí –®–∞–≥ –±–µ–∑—É–±—ã—Ç–∫–∞: {strategy.breakeven_step}%")
print(f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å (–ø–æ—Å–ª–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è): {strategy.stop_loss_percent}%")
print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è: {strategy.max_open_attempts}")
print("=" * 60)

while True:
    if should_stop:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...")
        break
    sleep(1)

