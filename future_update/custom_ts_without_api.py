from pybit.unified_trading import WebSocket
from time import sleep, time
import json


class PaperTrailingStop:
    def __init__(self, symbol, position_size, activation_percent=1.0, trail_percent=0.5):
        self.symbol = symbol
        self.position_size = position_size  # + –¥–ª—è –ª–æ–Ω–≥–∞, - –¥–ª—è —à–æ—Ä—Ç–∞
        self.activation_percent = activation_percent
        self.trail_percent = trail_percent

        # –¢—Ä–µ–π–¥–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.entry_price = None
        self.best_price = None
        self.is_active = False
        self.stop_price = None
        self.is_position_closed = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.entry_time = None
        self.close_time = None
        self.total_profit = 0

    def update(self, current_price):
        if self.is_position_closed:
            return "ALREADY_CLOSED"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ü–µ–Ω–µ
        if self.entry_price is None:
            self.entry_price = current_price
            self.best_price = current_price
            self.entry_time = time()
            print(f"üéØ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Ü–µ–Ω–µ: {current_price:.2f}")
            return "POSITION_OPENED"

        # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π –ø—Ä–∏–±—ã–ª–∏
        if self.position_size > 0:  # LONG
            current_profit_percent = (current_price - self.entry_price) / self.entry_price * 100
            current_profit_usd = (current_price - self.entry_price) * abs(self.position_size)
        else:  # SHORT
            current_profit_percent = (self.entry_price - current_price) / self.entry_price * 100
            current_profit_usd = (self.entry_price - current_price) * abs(self.position_size)

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏
        if self.position_size > 0:
            if current_price > self.best_price:
                self.best_price = current_price
                print(f"üìà –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º: {current_price:.2f}")

            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
            if not self.is_active and current_profit_percent >= self.activation_percent:
                self.is_active = True
                self.stop_price = self.best_price * (1 - self.trail_percent / 100)
                print(f"üöÄ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")
                print(f"   –ü—Ä–∏–±—ã–ª—å: {current_profit_percent:.2f}% ({current_profit_usd:.2f}$)")
                print(f"   –°—Ç–æ–ø-—Ü–µ–Ω–∞: {self.stop_price:.2f}")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø–∞
            if self.is_active:
                new_stop = self.best_price * (1 - self.trail_percent / 100)
                if new_stop > self.stop_price:
                    self.stop_price = new_stop
                    print(f"üîº –°—Ç–æ–ø –ø–µ—Ä–µ–º–µ—â–µ–Ω: {self.stop_price:.2f}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–æ–ø–∞
                if current_price <= self.stop_price:
                    self.is_position_closed = True
                    self.close_time = time()
                    self.total_profit = current_profit_usd

                    print(f"üî¥ –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü –°–†–ê–ë–û–¢–ê–õ!")
                    print(f"   –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {current_price:.2f}")
                    print(f"   –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {current_profit_percent:.2f}% ({current_profit_usd:.2f}$)")
                    print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: {self.close_time - self.entry_time:.1f} —Å–µ–∫")
                    return "STOP_HIT"

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
        elif self.position_size < 0:
            if current_price < self.best_price:
                self.best_price = current_price
                print(f"üìâ –ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º: {current_price:.2f}")

            if not self.is_active and current_profit_percent >= self.activation_percent:
                self.is_active = True
                self.stop_price = self.best_price * (1 + self.trail_percent / 100)
                print(f"üöÄ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")
                print(f"   –ü—Ä–∏–±—ã–ª—å: {current_profit_percent:.2f}% ({current_profit_usd:.2f}$)")
                print(f"   –°—Ç–æ–ø-—Ü–µ–Ω–∞: {self.stop_price:.2f}")

            if self.is_active:
                new_stop = self.best_price * (1 + self.trail_percent / 100)
                if new_stop < self.stop_price:
                    self.stop_price = new_stop
                    print(f"üîΩ –°—Ç–æ–ø –ø–µ—Ä–µ–º–µ—â–µ–Ω: {self.stop_price:.2f}")

                if current_price >= self.stop_price:
                    self.is_position_closed = True
                    self.close_time = time()
                    self.total_profit = current_profit_usd

                    print(f"üî¥ –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü –°–†–ê–ë–û–¢–ê–õ!")
                    print(f"   –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {current_price:.2f}")
                    print(f"   –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {current_profit_percent:.2f}% ({current_profit_usd:.2f}$)")
                    return "STOP_HIT"

        # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (—Ä–µ–¥–∫–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å)
        if hasattr(self, 'last_print') and time() - self.last_print > 5:
            status = "–ê–ö–¢–ò–í–ï–ù" if self.is_active else "–û–ñ–ò–î–ê–ù–ò–ï"
            print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} | –ü—Ä–∏–±—ã–ª—å: {current_profit_percent:+.2f}% | –°—Ç–∞—Ç—É—Å: {status}")
            self.last_print = time()
        elif not hasattr(self, 'last_print'):
            self.last_print = time()

        return "UPDATED"


# –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
trailing_stop = PaperTrailingStop(
    symbol="BTCUSDT",
    position_size=0.001,  # –õ–æ–Ω–≥ 0.001 BTC
    activation_percent=1.0,  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ +1%
    trail_percent=0.5  # –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ 0.5%
)


def handle_message(message):
    try:
        if 'data' in message:
            data = message['data']

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
            last_price = float(data.get('lastPrice', 0))
            bid_price = float(data.get('bid1Price', 0))
            ask_price = float(data.get('ask1Price', 0))

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã
            if last_price == 0:
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
            result = trailing_stop.update(last_price)

            # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            if hasattr(handle_message, 'counter'):
                handle_message.counter += 1
            else:
                handle_message.counter = 1
                print("üü¢ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞...")
                print("=" * 50)

            # –†–∞–∑ –≤ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if handle_message.counter % 20 == 0:
                change_24h = float(data.get('price24hPcnt', 0)) * 100
                print(f"üìà –†—ã–Ω–æ–∫: {last_price:.2f} | 24h: {change_24h:+.2f}% | Bid/Ask: {bid_price:.2f}/{ask_price:.2f}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket
ws = WebSocket(
    testnet=True,
    channel_type="linear",
)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
ws.ticker_stream("BTCUSDT", handle_message)

print("üéØ –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü –ó–ê–ü–£–©–ï–ù")
print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
print(f"‚Ä¢ –°–∏–º–≤–æ–ª: BTCUSDT")
print(f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {trailing_stop.position_size}")
print(f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏: +{trailing_stop.activation_percent}%")
print(f"‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥: {trailing_stop.trail_percent}%")
print("=" * 50)

try:
    while True:
        sleep(1)
except KeyboardInterrupt:
    print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    if trailing_stop.entry_price and not trailing_stop.is_position_closed:
        current_price = trailing_stop.best_price if trailing_stop.best_price else trailing_stop.entry_price
        profit_percent = (current_price - trailing_stop.entry_price) / trailing_stop.entry_price * 100
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: –ü—Ä–∏–±—ã–ª—å {profit_percent:+.2f}%")