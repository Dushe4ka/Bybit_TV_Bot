from pybit.unified_trading import WebSocket, HTTP
from time import sleep
import json
from config import DEMO_API_KEY, DEMO_API_SECRET

session = HTTP(testnet=False, api_key=DEMO_API_KEY, api_secret=DEMO_API_SECRET, demo=True)
ws = WebSocket(testnet=False, channel_type="linear")


class TrailingStop:
    def __init__(self, symbol, position_size, activation_percent=1.0, trail_percent=0.5, initial_stop_percent=2.0):
        self.symbol = symbol
        self.position_size = position_size
        self.activation_percent = activation_percent
        self.trail_percent = trail_percent
        self.initial_stop_percent = initial_stop_percent
        self.entry_price = None
        self.best_price = None
        self.is_active = False
        self.stop_price = None
        self.position_opened = False
        self.initial_stop_price = None

    def open_position(self, current_price, side="Buy"):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            order = session.place_order(
                category="linear",
                symbol=self.symbol,
                side=side,
                orderType="Market",
                qty=abs(self.position_size),
            )
            
            if order.get('retCode') == 0:
                self.entry_price = current_price
                self.best_price = current_price
                self.position_opened = True
                
                # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                self.initial_stop_price = self.entry_price * (1 - self.initial_stop_percent / 100) if side == "Buy" else self.entry_price * (1 + self.initial_stop_percent / 100)
                
                print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞! –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {self.entry_price:.2f}")
                print(f"üõ°Ô∏è –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø: {self.initial_stop_price:.2f}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {order.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False

    def check_initial_stop(self, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        if not self.position_opened or self.initial_stop_price is None:
            return None
            
        # –î–ª—è –ª–æ–Ω–≥–∞: –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∏–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ø–∞
        if self.position_size > 0 and current_price <= self.initial_stop_price:
            return "Sell"
        # –î–ª—è —à–æ—Ä—Ç–∞: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ–¥–Ω—è–ª–∞—Å—å –≤—ã—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ø–∞  
        elif self.position_size < 0 and current_price >= self.initial_stop_price:
            return "Sell"  # –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–∂–µ –Ω—É–∂–µ–Ω Sell
            
        return None

    def update(self, current_price, bid_price, ask_price):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º lastPrice –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é, –Ω–æ –º–æ–∂–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å bid/ask
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
        if self.position_opened and self.entry_price:
            if self.position_size > 0:  # long –ø–æ–∑–∏—Ü–∏—è
                pnl_percent = (current_price - self.entry_price) / self.entry_price * 100
            else:  # short –ø–æ–∑–∏—Ü–∏—è
                pnl_percent = (self.entry_price - current_price) / self.entry_price * 100
            
            pnl_emoji = "üìà" if pnl_percent >= 0 else "üìâ"
            print(f"üí∞ Last: {current_price:.2f} | Bid: {bid_price:.2f} | Ask: {ask_price:.2f} | {pnl_emoji} PnL: {pnl_percent:+.2f}%")
        else:
            print(f"üí∞ Last: {current_price:.2f} | Bid: {bid_price:.2f} | Ask: {ask_price:.2f}")

        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if not self.position_opened:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
        initial_stop_action = self.check_initial_stop(current_price)
        if initial_stop_action:
            print(f"üõ°Ô∏è –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª!")
            return initial_stop_action

        # –õ–æ–≥–∏–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
        if self.position_size > 0:  # long –ø–æ–∑–∏—Ü–∏—è
            if current_price > self.best_price:
                self.best_price = current_price

            profit_percent = (current_price - self.entry_price) / self.entry_price * 100

            if not self.is_active and profit_percent >= self.activation_percent:
                self.is_active = True
                self.stop_price = self.best_price * (1 - self.trail_percent / 100)
                print(f"üéØ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%")

            if self.is_active:
                new_stop = self.best_price * (1 - self.trail_percent / 100)
                if new_stop > self.stop_price:
                    self.stop_price = new_stop
                    print(f"üìà –°—Ç–æ–ø –ø–µ—Ä–µ–º–µ—â–µ–Ω: {self.stop_price:.2f}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ lastPrice
                if current_price <= self.stop_price:
                    return "Sell"

        elif self.position_size < 0:  # short –ø–æ–∑–∏—Ü–∏—è
            if current_price < self.best_price:
                self.best_price = current_price

            profit_percent = (self.entry_price - current_price) / self.entry_price * 100

            if not self.is_active and profit_percent >= self.activation_percent:
                self.is_active = True
                self.stop_price = self.best_price * (1 + self.trail_percent / 100)
                print(f"üéØ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%")

            if self.is_active:
                new_stop = self.best_price * (1 + self.trail_percent / 100)
                if new_stop < self.stop_price:
                    self.stop_price = new_stop
                    print(f"üìâ –°—Ç–æ–ø –ø–µ—Ä–µ–º–µ—â–µ–Ω: {self.stop_price:.2f}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ lastPrice
                if current_price >= self.stop_price:
                    return "Sell"  # –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–∂–µ –Ω—É–∂–µ–Ω Sell

        return None


trailing_stop = TrailingStop("BTCUSDT", -0.001, 1.0, 0.5, 2.0)  # –î–æ–±–∞–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø 2%


def handle_message(message):
    try:
        if 'data' in message:
            data = message['data']

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω—ã
            last_price = float(data.get('lastPrice', 0))
            bid_price = float(data.get('bid1Price', 0))
            ask_price = float(data.get('ask1Price', 0))

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            change_24h = float(data.get('price24hPcnt', 0)) * 100  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            high_24h = float(data.get('highPrice24h', 0))
            low_24h = float(data.get('lowPrice24h', 0))

            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
            print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24h: {change_24h:+.2f}% | –î–∏–∞–ø–∞–∑–æ–Ω: {low_24h:.2f}-{high_24h:.2f}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞)
            if not trailing_stop.position_opened:
                print("üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é...")
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–∫–∞ position_size
                side = "Buy" if trailing_stop.position_size > 0 else "Sell"
                if trailing_stop.open_position(last_price, side):
                    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞! –°—Ç–æ—Ä–æ–Ω–∞: {side}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")
                    return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
            action = trailing_stop.update(last_price, bid_price, ask_price)

            if action:
                print(f"üö® –°–¢–û–ü –°–†–ê–ë–û–¢–ê–õ!")
                print(f"üí∏ Last: {last_price:.2f} | –°—Ç–æ–ø: {trailing_stop.stop_price or trailing_stop.initial_stop_price:.2f}")

                try:
                    order = session.place_order(
                        category="linear",
                        symbol="BTCUSDT",
                        side=action,
                        orderType="Market",
                        qty=abs(trailing_stop.position_size),
                    )
                    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞! –ü—Ä–∏—á–∏–Ω–∞: {'–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø' if trailing_stop.is_active else '–ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø'}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    trailing_stop.position_opened = False
                    trailing_stop.entry_price = None
                    trailing_stop.best_price = None
                    trailing_stop.is_active = False
                    trailing_stop.stop_price = None
                    trailing_stop.initial_stop_price = None
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞–∑ –≤ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if hasattr(handle_message, 'counter'):
                handle_message.counter += 1
            else:
                handle_message.counter = 1

            if handle_message.counter % 10 == 0:
                status_info = f"üîß –°—Ç–∞—Ç—É—Å: –ü–æ–∑–∏—Ü–∏—è={'–û—Ç–∫—Ä—ã—Ç–∞' if trailing_stop.position_opened else '–ó–∞–∫—Ä—ã—Ç–∞'}"
                if trailing_stop.position_opened:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                    if trailing_stop.position_size > 0:  # long –ø–æ–∑–∏—Ü–∏—è
                        current_pnl_percent = (last_price - trailing_stop.entry_price) / trailing_stop.entry_price * 100
                    else:  # short –ø–æ–∑–∏—Ü–∏—è
                        current_pnl_percent = (trailing_stop.entry_price - last_price) / trailing_stop.entry_price * 100
                    
                    pnl_emoji = "üìà" if current_pnl_percent >= 0 else "üìâ"
                    status_info += f", {pnl_emoji} PnL: {current_pnl_percent:+.2f}%"
                    status_info += f", –¢—Ä–µ–π–ª–∏–Ω–≥={'–ê–∫—Ç–∏–≤–µ–Ω' if trailing_stop.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
                    status_info += f", –õ—É—á—à–∞—è —Ü–µ–Ω–∞={trailing_stop.best_price:.2f}"
                    if trailing_stop.is_active:
                        status_info += f", –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø={trailing_stop.stop_price:.2f}"
                    else:
                        status_info += f", –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø={trailing_stop.initial_stop_price:.2f}"
                print(status_info)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


ws.ticker_stream("BTCUSDT", handle_message)

print("–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∑–∞–ø—É—â–µ–Ω...")
while True:
    sleep(1)