"""
–°—Ç—Ä–∞—Ç–µ–≥–∏—è —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏–π —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Celery
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏
"""
from pybit.unified_trading import WebSocket, HTTP
import asyncio
from typing import Optional
from config import API_KEY, API_SECRET, DEMO_API_KEY, DEMO_API_SECRET, TELEGRAM_BOT_TOKEN
from database import get_all_subscribed_users
from utils.send_tg_message import (
    notify_position_opened,
    notify_averaging_order_placed,
    notify_averaging_executed,
    notify_take_profit_reached,
    notify_breakeven_moved,
    notify_position_closed,
    notify_stop_loss_triggered,
    notify_strategy_error
)
from logger_config import setup_logger

logger = setup_logger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
DEFAULT_USDT_AMOUNT = 100
DEFAULT_AVERAGING_PERCENT = 10.0
DEFAULT_INITIAL_TP_PERCENT = 3.0
DEFAULT_BREAKEVEN_STEP = 2.0
DEFAULT_STOP_LOSS_PERCENT = 15.0


class ShortAveragingStrategyCelery:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏–π —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Celery - –ë–´–°–¢–†–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(
        self,
        symbol: str,
        usdt_amount: float = DEFAULT_USDT_AMOUNT,
        averaging_percent: float = DEFAULT_AVERAGING_PERCENT,
        initial_tp_percent: float = DEFAULT_INITIAL_TP_PERCENT,
        breakeven_step: float = DEFAULT_BREAKEVEN_STEP,
        stop_loss_percent: float = DEFAULT_STOP_LOSS_PERCENT,
        use_demo: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
            usdt_amount: –°—É–º–º–∞ –≤ USDT –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            averaging_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%)
            initial_tp_percent: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3%)
            breakeven_step: –®–∞–≥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–µ–∑—É–±—ã—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2%)
            stop_loss_percent: –°—Ç–æ–ø-–ª–æ—Å—Å –ø–æ—Å–ª–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15%)
            use_demo: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-—Å—á–µ—Ç
        """
        self.symbol = symbol.upper()
        self.usdt_amount = usdt_amount
        self.averaging_percent = averaging_percent
        self.initial_tp_percent = initial_tp_percent
        self.breakeven_step = breakeven_step
        self.stop_loss_percent = stop_loss_percent
        self.use_demo = use_demo
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        api_key = DEMO_API_KEY if use_demo else API_KEY
        api_secret = DEMO_API_SECRET if use_demo else API_SECRET
        
        self.session = HTTP(
            testnet=False,
            api_key=api_key,
            api_secret=api_secret,
            demo=use_demo
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        self.qty_precision = None
        self.min_qty = None
        self.max_qty = None
        self._load_symbol_info()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        self.position_qty = 0
        self.entry_price = None  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
        self.initial_entry_price = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        self.averaged_price = None  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ (–ø–æ–ª—É—á–∞–µ–º –∏–∑ API)
        self.is_averaged = False
        self.averaging_order_id = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ –±–µ–∑—É–±—ã—Ç–∫–∞
        self.tp_price = None
        self.fake_tp_price = None  # ‚ú® –ù–û–í–û–ï: 2% —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π TP –ø–æ—Å–ª–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        self.breakeven_price = None
        self.best_profit_percent = 0
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.position_opened = False
        self.stop_loss_price = None
        
        # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
        self.open_attempts = 0
        self.max_open_attempts = 5
        self.failed_to_open = False
        self.last_error = None
        
        # WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã
        self.ws = None
        self.should_stop = False
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.message_counter = 0
        self.status_interval = 10
        
        # ‚ú® –ù–û–í–û–ï: –û–¥–∏–Ω event loop –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.loop = None
        
        # ‚ú® –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∏–∫–æ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏ (–≤–∞–∂–Ω–æ!)
        self.peak_profit_percent = 0.0
        
        # ‚ú® –ù–û–í–û–ï: –†–µ–¥–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        self.last_position_check = 0
        self.position_check_interval = 5.0  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
        self.last_averaging_check = 0
        self.averaging_check_interval = 0.5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Ä–∞–∑ –≤ 0.5 —Å–µ–∫
        
        # ‚ú® –ù–û–í–û–ï: –£–º–µ–Ω—å—à–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.log_counter = 0
        self.log_interval = 10  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π —Ç–∏–∫
        
        # ‚ú® –ù–û–í–û–ï: –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.ticks_processed = 0
        self.start_time = None
        
        # ‚ú® –ù–û–í–û–ï: –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ TP
        self.fake_tp_reached = False
        
        logger.info(f"[{self.symbol}] –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ë–´–°–¢–†–û–ú —Ä–µ–∂–∏–º–µ")

    def _ensure_event_loop(self):
        """–°–æ–∑–¥–∞–µ—Ç event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if not self.loop:
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)

    async def safe_send_notification(self, notification_func, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π event loop"""
        try:
            # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º event loop –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                loop = asyncio.get_running_loop()
            except RuntimeError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            await notification_func(*args, **kwargs)
        except Exception as e:
            logger.error(f"[{self.symbol}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def _load_symbol_info(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            response = self.session.get_instruments_info(
                category="linear",
                symbol=self.symbol
            )
            
            if response.get('retCode') == 0:
                instruments = response.get('result', {}).get('list', [])
                if len(instruments) > 0:
                    instrument = instruments[0]
                    lot_size_filter = instrument.get('lotSizeFilter', {})
                    
                    qty_step = float(lot_size_filter.get('qtyStep', '0.01'))
                    self.min_qty = float(lot_size_filter.get('minOrderQty', '0.01'))
                    self.max_qty = float(lot_size_filter.get('maxOrderQty', '1000000'))
                    
                    self.qty_precision = len(str(qty_step).rstrip('0').split('.')[-1])
                    
                    logger.info(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–º–≤–æ–ª–µ {self.symbol}:")
                    logger.info(f"   –®–∞–≥ qty: {qty_step}")
                    logger.info(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {self.qty_precision} –∑–Ω–∞–∫–æ–≤")
                    logger.info(f"   –ú–∏–Ω. qty: {self.min_qty}")
                    logger.info(f"   –ú–∞–∫—Å. qty: {self.max_qty}")
                else:
                    logger.warning(f"[{self.symbol}] –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    self.qty_precision = 3
                    self.min_qty = 0.001
                    self.max_qty = 1000000
            else:
                logger.warning(
                    f"[{self.symbol}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.get('retMsg')}"
                )
                self.qty_precision = 3
                self.min_qty = 0.001
                self.max_qty = 1000000
                
        except Exception as e:
            logger.error(f"[{self.symbol}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            self.qty_precision = 3
            self.min_qty = 0.001
            self.max_qty = 1000000

    def calculate_qty(self, price: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Å—É–º–º—É USDT"""
        qty = self.usdt_amount / price
        
        if self.qty_precision is not None:
            qty = round(qty, self.qty_precision)
        else:
            qty = round(qty, 3)
        
        if self.min_qty and qty < self.min_qty:
            logger.warning(
                f"[{self.symbol}] Qty {qty} < min {self.min_qty}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ"
            )
            qty = self.min_qty
        
        if self.max_qty and qty > self.max_qty:
            logger.warning(
                f"[{self.symbol}] Qty {qty} > max {self.max_qty}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ"
            )
            qty = self.max_qty
        
        return qty

    def check_position_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            response = self.session.get_positions(
                category="linear",
                symbol=self.symbol
            )
            
            if response.get('retCode') == 0:
                positions = response.get('result', {}).get('list', [])
                for pos in positions:
                    size = float(pos.get('size', 0))
                    if size > 0:
                        return True
            return False
        except Exception as e:
            logger.error(f"[{self.symbol}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False

    def get_position_avg_price(self) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ API"""
        try:
            response = self.session.get_positions(
                category="linear",
                symbol=self.symbol
            )
            
            if response.get('retCode') == 0:
                positions = response.get('result', {}).get('list', [])
                for pos in positions:
                    size = float(pos.get('size', 0))
                    if size > 0:
                        avg_price = float(pos.get('avgPrice', 0))
                        if avg_price > 0:
                            logger.info(f"[{self.symbol}] –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –∏–∑ API: {avg_price:.8g}")
                            return avg_price
            return None
        except Exception as e:
            logger.error(f"[{self.symbol}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã: {e}")
            return None

    async def open_short_position(self, current_price: float) -> bool:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if self.open_attempts >= self.max_open_attempts:
            if not self.failed_to_open:
                self.failed_to_open = True
                error_msg = (
                    f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: "
                    f"{self.max_open_attempts}. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {self.last_error}"
                )
                logger.error(f"[{self.symbol}] {error_msg}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
                chat_ids = await get_all_subscribed_users()
                await self.safe_send_notification(
                    notify_strategy_error,
                    chat_ids, TELEGRAM_BOT_TOKEN, self.symbol, 
                    error_msg, "SHORT_AVERAGING"
                )
            return False
        
        try:
            self.open_attempts += 1
            qty = self.calculate_qty(current_price)
            
            logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ #{self.open_attempts}/{self.max_open_attempts} - –û—Ç–∫—Ä—ã–≤–∞–µ–º –®–û–†–¢ –ø–æ–∑–∏—Ü–∏—é...")
            logger.info(f"üí∞ –°—É–º–º–∞: {self.usdt_amount} USDT")
            logger.info(f"üìä –¶–µ–Ω–∞: {current_price:.8g}")
            logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty} (—Ç–æ—á–Ω–æ—Å—Ç—å: {self.qty_precision} –∑–Ω–∞–∫–æ–≤)")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—é
            order = self.session.place_order(
                category="linear",
                symbol=self.symbol,
                side="Sell",
                orderType="Market",
                qty=qty,
            )
            
            if order.get('retCode') == 0:
                self.entry_price = current_price
                self.initial_entry_price = current_price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                self.position_qty = qty
                self.position_opened = True
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (–¥–ª—è —à–æ—Ä—Ç–∞ —ç—Ç–æ –ù–ò–ñ–ï)
                self.tp_price = self.entry_price * (1 - self.initial_tp_percent / 100)
                
                logger.info("‚úÖ –®–û–†–¢ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!")
                logger.info(f"üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {self.entry_price:.8g}")
                logger.info(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {self.tp_price:.8g} (-{self.initial_tp_percent}%)")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
                chat_ids = await get_all_subscribed_users()
                await self.safe_send_notification(
                    notify_position_opened,
                    chat_ids, TELEGRAM_BOT_TOKEN, self.symbol,
                    self.entry_price, self.position_qty, self.usdt_amount,
                    self.tp_price, self.initial_tp_percent, "SHORT"
                )
                
                # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
                await self.place_averaging_order()
                
                return True
            else:
                error_msg = order.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                self.last_error = error_msg
                logger.error(
                    f"[{self.symbol}] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ "
                    f"(–ø–æ–ø—ã—Ç–∫–∞ {self.open_attempts}/{self.max_open_attempts}): {error_msg}"
                )
                return False
                
        except Exception as e:
            self.last_error = str(e)
            logger.error(
                f"[{self.symbol}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ "
                f"(–ø–æ–ø—ã—Ç–∫–∞ {self.open_attempts}/{self.max_open_attempts}): {e}"
            )
            return False

    async def place_averaging_order(self) -> bool:
        """–í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ +10% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"""
        try:
            # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ +10% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–¥–ª—è —à–æ—Ä—Ç–∞ —ç—Ç–æ –í–´–®–ï)
            averaging_price = self.entry_price * (1 + self.averaging_percent / 100)
            qty = self.calculate_qty(averaging_price)  # –°—É–º–º–∞ –≤ USDT –ø–æ –Ω–æ–≤–æ–π —Ü–µ–Ω–µ
            
            logger.info("üìù –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ...")
            logger.info(f"üí∞ –¶–µ–Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {averaging_price:.8g} (+{self.averaging_percent}% –æ—Ç –≤—Ö–æ–¥–∞)")
            logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty} (—Å—É–º–º–∞: {self.usdt_amount} USDT)")
            logger.info(f"üìä –û–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ {self.qty_precision} –∑–Ω–∞–∫–æ–≤")
            
            order = self.session.place_order(
                category="linear",
                symbol=self.symbol,
                side="Sell",
                orderType="Limit",
                qty=qty,
                price=averaging_price,
            )
            
            if order.get('retCode') == 0:
                self.averaging_order_id = order.get('result', {}).get('orderId')
                logger.info(f"‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω! ID: {self.averaging_order_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                chat_ids = await get_all_subscribed_users()
                await self.safe_send_notification(
                    notify_averaging_order_placed,
                    chat_ids, TELEGRAM_BOT_TOKEN, self.symbol,
                    averaging_price, self.averaging_percent, qty
                )
                
                return True
            else:
                logger.error(
                    f"[{self.symbol}] –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: "
                    f"{order.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
                return False
                
        except Exception as e:
            logger.error(f"[{self.symbol}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    def check_averaging_order_filled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ"""
        try:
            if not self.averaging_order_id:
                return False
                
            response = self.session.get_open_orders(
                category="linear",
                symbol=self.symbol,
                orderId=self.averaging_order_id
            )
            
            if response.get('retCode') == 0:
                orders = response.get('result', {}).get('list', [])
                if len(orders) == 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    history = self.session.get_order_history(
                        category="linear",
                        symbol=self.symbol,
                        orderId=self.averaging_order_id
                    )
                    
                    if history.get('retCode') == 0:
                        orders_hist = history.get('result', {}).get('list', [])
                        if len(orders_hist) > 0:
                            order_status = orders_hist[0].get('orderStatus')
                            if order_status == 'Filled':
                                return True
            return False
            
        except Exception as e:
            logger.error(f"[{self.symbol}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    async def apply_averaging(self, current_price: float) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è"""
        try:
            logger.info(f"[{self.symbol}] –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ!")
            
            # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –∏–∑ API
            api_avg_price = self.get_position_avg_price()
            if api_avg_price:
                self.averaged_price = api_avg_price
                logger.info(f"[{self.symbol}] –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –∏–∑ API: {self.averaged_price:.8g}")
            else:
                # Fallback: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
                averaging_price = self.entry_price * (1 + self.averaging_percent / 100)  # +10% –æ—Ç –≤—Ö–æ–¥–∞
                new_qty = self.calculate_qty(averaging_price)
                total_qty = self.position_qty + new_qty
                self.averaged_price = (
                    self.entry_price * self.position_qty + averaging_price * new_qty
                ) / total_qty
                logger.warning(f"[{self.symbol}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É: {self.averaged_price:.8g}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ API
            try:
                response = self.session.get_positions(category="linear", symbol=self.symbol)
                if response.get('retCode') == 0:
                    positions = response.get('result', {}).get('list', [])
                    for pos in positions:
                        size = float(pos.get('size', 0))
                        if size > 0:
                            self.position_qty = size
                            break
            except Exception as e:
                logger.warning(f"[{self.symbol}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {e}")
            
            self.is_averaged = True
            
            # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–π —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
            self.stop_loss_price = self.averaged_price * (1 + self.stop_loss_percent / 100)
            
            # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
            self.tp_price = self.averaged_price * (1 - self.initial_tp_percent / 100)
            # ‚ú® –ù–û–í–û–ï: 2% —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π TP –æ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
            self.fake_tp_price = self.averaged_price * (1 - 0.02)  # 2% –æ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
            self.best_profit_percent = 0
            # ‚ú® –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–µ–∑—É–±—ã—Ç–æ–∫, —á—Ç–æ–±—ã –æ–Ω –ø–µ—Ä–µ—Å—á–∏—Ç–∞–ª—Å—è –æ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
            self.breakeven_price = None
            
            logger.info(
                f"[{self.symbol}] –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {self.averaged_price:.6f}, "
                f"SL: {self.stop_loss_price:.6f}, TP: {self.tp_price:.6f}, "
                f"Fake TP: {self.fake_tp_price:.6f}, Qty: {self.position_qty}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            chat_ids = await get_all_subscribed_users()
            await self.safe_send_notification(
                notify_averaging_executed,
                chat_ids, TELEGRAM_BOT_TOKEN, self.symbol,
                self.averaged_price, self.position_qty,
                self.tp_price, self.initial_tp_percent,
                self.stop_loss_price, self.stop_loss_percent
            )
            
            return True
            
        except Exception as e:
            logger.error(f"[{self.symbol}] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {e}")
            return False

    async def update(self, current_price: float, current_time: float) -> Optional[str]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - –ü–†–û–í–ï–†–Ø–ï–¢ –ö–ê–ñ–î–´–ô –¢–ò–ö"""
        
        if not self.position_opened:
            return None
        
        # ‚ú® –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –†–ï–î–ö–û (—ç—Ç–æ –º–µ–¥–ª–µ–Ω–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å)
        if current_time - self.last_position_check > self.position_check_interval:
            if not self.check_position_exists():
                logger.warning(f"[{self.symbol}] –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return "STOP"
            self.last_position_check = current_time
        
        # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        # –ï—Å–ª–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ API
        if self.is_averaged:
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ API
            if current_time - self.last_position_check > self.position_check_interval:
                api_avg_price = self.get_position_avg_price()
                if api_avg_price:
                    self.averaged_price = api_avg_price
            base_price = self.averaged_price
        else:
            base_price = self.entry_price
        
        # ‚ú® –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ TP –∏ –ë–£
        # –î–û —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        # –ü–û–°–õ–ï —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: –æ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
        tp_breakeven_base_price = self.averaged_price if self.is_averaged else self.entry_price
        
        # ‚ú® –ö–†–ò–¢–ò–ß–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –Ω–∞ –ö–ê–ñ–î–û–ú —Ç–∏–∫–µ
        profit_percent = (base_price - current_price) / base_price * 100
        
        # ‚ú® –ù–û–í–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–∏–∫–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å
        if profit_percent > self.peak_profit_percent:
            self.peak_profit_percent = profit_percent
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –ù–ê –ö–ê–ñ–î–û–ú –¢–ò–ö–ï (–±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è!)
        if self.is_averaged and self.stop_loss_price:
            if current_price >= self.stop_loss_price:
                logger.warning(
                    f"[{self.symbol}] üö® –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª! "
                    f"–¶–µ–Ω–∞: {current_price:.6f} >= {self.stop_loss_price:.6f}"
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                chat_ids = await get_all_subscribed_users()
                await self.safe_send_notification(
                    notify_stop_loss_triggered,
                    chat_ids, TELEGRAM_BOT_TOKEN, self.symbol,
                    current_price, self.stop_loss_price
                )
                
                return "CLOSE"
        
        # ‚ú® –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —á–∞—â–µ, –Ω–æ –Ω–µ –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∏–∫–µ
        if not self.is_averaged:
            if current_time - self.last_averaging_check > self.averaging_check_interval:
                if self.check_averaging_order_filled():
                    await self.apply_averaging(current_price)
                self.last_averaging_check = current_time
        
        # ‚ú® –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º 2% —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π TP –ø–æ—Å–ª–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        if self.is_averaged and self.fake_tp_price and current_price <= self.fake_tp_price:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π TP
            if not hasattr(self, 'fake_tp_reached') or not self.fake_tp_reached:
                self.fake_tp_reached = True
                logger.info(
                    f"[{self.symbol}] üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç 2% —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π TP! "
                    f"–¶–µ–Ω–∞: {current_price:.6f} <= {self.fake_tp_price:.6f}"
                )
                # –§–∏–∫—Ç–∏–≤–Ω—ã–π TP –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –õ–æ–≥–∏–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ - –ü–†–û–í–ï–†–Ø–ï–ú –ö–ê–ñ–î–´–ô –¢–ò–ö!
        if profit_percent >= self.initial_tp_percent:
            if not self.breakeven_price:
                # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–æ—Å—Ç–∏–≥–ª–∏ TP - —Å—Ç–∞–≤–∏–º –ë–£ –Ω–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–±—ã–ª–∏
                self.breakeven_price = current_price
                self.best_profit_percent = profit_percent
                logger.info(
                    f"[{self.symbol}] üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç TP {self.initial_tp_percent}%! "
                    f"–ë–µ–∑—É–±—ã—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {self.breakeven_price:.6f} ({profit_percent:.1f}%)"
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                chat_ids = await get_all_subscribed_users()
                await self.safe_send_notification(
                    notify_take_profit_reached,
                    chat_ids, TELEGRAM_BOT_TOKEN, self.symbol,
                    current_price, profit_percent, self.breakeven_price
                )
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–≥–∏ –±–µ–∑—É–±—ã—Ç–∫–∞ - –∫–∞–∂–¥—ã–µ 2% –ø—Ä–∏–±—ã–ª–∏
                # –ü—Ä–∏ 3% –ø—Ä–∏–±—ã–ª–∏: –ë–£ = 3%
                # –ü—Ä–∏ 5% –ø—Ä–∏–±—ã–ª–∏: –ë–£ = 5% 
                # –ü—Ä–∏ 7% –ø—Ä–∏–±—ã–ª–∏: –ë–£ = 7%
                target_breakeven_percent = int(profit_percent / self.breakeven_step) * self.breakeven_step
                
                # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5% –∏–ª–∏ 7%)
                if target_breakeven_percent > self.best_profit_percent:
                    old_breakeven = self.breakeven_price
                    self.breakeven_price = current_price
                    self.best_profit_percent = target_breakeven_percent
                    logger.info(
                        f"[{self.symbol}] üîí –ë–µ–∑—É–±—ã—Ç–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω: {old_breakeven:.6f} -> "
                        f"{self.breakeven_price:.6f} ({target_breakeven_percent:.1f}%)"
                    )
                    
                    chat_ids = await get_all_subscribed_users()
                    await self.safe_send_notification(
                        notify_breakeven_moved,
                        chat_ids, TELEGRAM_BOT_TOKEN, self.symbol,
                        self.breakeven_price, target_breakeven_percent, profit_percent
                    )
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑—É–±—ã—Ç–æ–∫ –ù–ê –ö–ê–ñ–î–û–ú –¢–ò–ö–ï!
        if self.breakeven_price and current_price >= self.breakeven_price:
            logger.info(
                f"[{self.symbol}] üèÅ –ë–µ–∑—É–±—ã—Ç–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–ª! "
                f"–¶–µ–Ω–∞: {current_price:.6f} >= {self.breakeven_price:.6f} "
                f"(–ü–∏–∫ –ø—Ä–∏–±—ã–ª–∏ –±—ã–ª: {self.peak_profit_percent:.2f}%)"
            )
            return "CLOSE"
        
        return None

    async def cancel_averaging_order(self) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if not self.averaging_order_id:
            return True
        
        max_attempts = 3
        for attempt in range(1, max_attempts + 1):
            try:
                logger.info(
                    f"[{self.symbol}] –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –æ—Ç–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä"
                )
                response = self.session.cancel_order(
                    category="linear",
                    symbol=self.symbol,
                    orderId=self.averaging_order_id
                )
                
                if response.get('retCode') == 0:
                    logger.info(f"[{self.symbol}] –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
                    return True
                else:
                    error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    if 'not exists' in error_msg.lower() or 'not found' in error_msg.lower():
                        logger.info(f"[{self.symbol}] –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        return True
                    logger.warning(f"[{self.symbol}] –ü–æ–ø—ã—Ç–∫–∞ {attempt}: {error_msg}")
                    
            except Exception as e:
                error_str = str(e)
                if 'not exists' in error_str.lower() or 'not found' in error_str.lower():
                    logger.info(f"[{self.symbol}] –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return True
                logger.warning(f"[{self.symbol}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
            
            if attempt < max_attempts:
                await asyncio.sleep(0.5)
        
        return False

    def stop_websocket(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            if self.ws:
                logger.info(f"[{self.symbol}] –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                self.ws.exit()
                self.ws = None
                logger.info(f"[{self.symbol}] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.warning(f"[{self.symbol}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")
    
    async def close_position(self) -> bool:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é"""
        try:
            logger.info(f"[{self.symbol}] –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            response = self.session.get_tickers(
                category="linear",
                symbol=self.symbol
            )
            current_price = None
            if response.get('retCode') == 0:
                tickers = response.get('result', {}).get('list', [])
                if len(tickers) > 0:
                    current_price = float(tickers[0].get('lastPrice', 0))
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if not self.is_averaged and self.averaging_order_id:
                await self.cancel_averaging_order()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (–¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —à–æ—Ä—Ç–∞ –Ω—É–∂–µ–Ω Buy)
            order = self.session.place_order(
                category="linear",
                symbol=self.symbol,
                side="Buy",
                orderType="Market",
                qty=self.position_qty,
            )
            
            if order.get('retCode') == 0:
                logger.info(f"[{self.symbol}] –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!")
                
                # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
                if self.is_averaged and self.averaged_price:
                    base_price = self.averaged_price
                else:
                    base_price = self.entry_price
                
                profit_percent = None
                profit_usdt = None
                
                if current_price and base_price:
                    profit_percent = (base_price - current_price) / base_price * 100
                    profit_usdt = (base_price - current_price) * self.position_qty
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
                close_reason = "BREAKEVEN"
                if self.is_averaged and self.stop_loss_price and current_price:
                    if current_price >= self.stop_loss_price:
                        close_reason = "STOP_LOSS"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
                chat_ids = await get_all_subscribed_users()
                await self.safe_send_notification(
                    notify_position_closed,
                    chat_ids, TELEGRAM_BOT_TOKEN, self.symbol,
                    close_reason, base_price, current_price or 0,
                    self.position_qty, profit_percent, profit_usdt,
                    self.is_averaged
                )
                
                return True
            else:
                error_msg = order.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"[{self.symbol}] –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {error_msg}")
                return False
                
        except Exception as e:
            logger.error(f"[{self.symbol}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False

    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ WebSocket - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–´–ô"""
        try:
            # –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if self.should_stop:
                return
            
            if 'data' not in message:
                return
            
            data = message['data']
            current_price = float(data.get('lastPrice', 0))
            
            if current_price <= 0:
                return
            
            # ‚ú® –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º time –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –∫–ª–∞—Å—Å–∞
            import time
            current_time = time.time()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞
            if self.start_time is None:
                self.start_time = current_time
            
            self.ticks_processed += 1
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            if not self.position_opened and not self.failed_to_open:
                self._ensure_event_loop()
                success = self.loop.run_until_complete(self.open_short_position(current_price))
                
                if success:
                    logger.info("‚úÖ –®–û–†–¢ –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!")
                
                if not success and self.failed_to_open:
                    self.should_stop = True
                    self.stop_websocket()
                return
            
            # ‚ú® –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –¥–µ–ª–∞–µ–º –ë–´–°–¢–†–´–ï –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            if self.position_opened:
                # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
                if self.is_averaged and self.averaged_price:
                    base_price = self.averaged_price
                else:
                    base_price = self.entry_price
                profit_percent = (base_price - current_price) / base_price * 100
                
                # ‚ú® –ö–†–ò–¢–ò–ß–ù–û: –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑—É–±—ã—Ç–∫–∞ –ü–ï–†–ï–î –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º!
                if self.breakeven_price and current_price >= self.breakeven_price:
                    logger.warning(f"üö® –ú–ì–ù–û–í–ï–ù–ù–û–ï —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –±–µ–∑—É–±—ã—Ç–∫–∞ –Ω–∞ {profit_percent:.2f}%!")
                    self._ensure_event_loop()
                    self.loop.run_until_complete(self.close_position())
                    self.should_stop = True
                    self.stop_websocket()
                    return
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–¥–∫–æ
                self.log_counter += 1
                if self.log_counter % self.log_interval == 0:
                    pnl_emoji = "üìà" if profit_percent >= 0 else "üìâ"
                    pnl_sign = "+" if profit_percent >= 0 else ""
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    elapsed = current_time - self.start_time
                    ticks_per_sec = self.ticks_processed / elapsed if elapsed > 0 else 0
                    
                    logger.info(
                        f"üí∞ –¶–µ–Ω–∞: {current_price:.8g} | {pnl_emoji} PnL: {pnl_sign}{profit_percent:.2f}% "
                        f"(–ü–∏–∫: {self.peak_profit_percent:.2f}%) | ‚ö° {ticks_per_sec:.1f} —Ç–∏–∫–æ–≤/—Å–µ–∫"
                    )
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
                self.message_counter += 1
                if self.message_counter % self.status_interval == 0:
                    averaged_status = "–î–ê" if self.is_averaged else "–ù–ï–¢"
                    logger.info(
                        f"üîß –ü–æ–∑–∏—Ü–∏—è –û–¢–ö–†–´–¢–ê | –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ={averaged_status} | "
                        f"PnL={profit_percent:+.2f}% | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.ticks_processed} —Ç–∏–∫–æ–≤"
                    )
            
            # –°–æ–∑–¥–∞–µ–º loop –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self._ensure_event_loop()
            
            # ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ update - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï –Ω–∞ –∫–∞–∂–¥–æ–º —Ç–∏–∫–µ
            action = self.loop.run_until_complete(self.update(current_price, current_time))
            
            if action == "CLOSE":
                logger.info(f"[{self.symbol}] –£—Å–ª–æ–≤–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è! –ú–∞–∫—Å –ø—Ä–∏–±—ã–ª—å: {self.peak_profit_percent:.2f}%")
                self.loop.run_until_complete(self.close_position())
                self.should_stop = True
                self.stop_websocket()
                
            elif action == "STOP":
                logger.warning(f"‚ö†Ô∏è [{self.symbol}] –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é!")
                if not self.is_averaged and self.averaging_order_id:
                    self.loop.run_until_complete(self.cancel_averaging_order())
                self.should_stop = True
                self.stop_websocket()
                
        except Exception as e:
            logger.error(f"[{self.symbol}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —á–µ—Ä–µ–∑ WebSocket"""
        try:
            logger.info("\n" + "=" * 60)
            logger.info("üöÄ –°–¢–†–ê–¢–ï–ì–ò–Ø –®–û–†–¢ –° –£–°–†–ï–î–ù–ï–ù–ò–ï–ú (–ë–´–°–¢–†–ê–Ø –í–ï–†–°–ò–Ø)")
            logger.info("=" * 60)
            logger.info(f"üìä –°–∏–º–≤–æ–ª: {self.symbol}")
            logger.info(f"üí∞ –°—É–º–º–∞: {self.usdt_amount} USDT")
            logger.info(f"üìè –¢–æ—á–Ω–æ—Å—Ç—å: {self.qty_precision} –∑–Ω–∞–∫–æ–≤ (–º–∏–Ω: {self.min_qty})")
            logger.info(f"üìà –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ: +{self.averaging_percent}% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (—Å—É–º–º–∞: {self.usdt_amount} USDT)")
            logger.info(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {self.initial_tp_percent}%")
            logger.info(f"üîí –ë–µ–∑—É–±—ã—Ç–æ–∫ —à–∞–≥: {self.breakeven_step}%")
            logger.info(f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {self.stop_loss_percent}%")
            logger.info(f"‚ö° –†–µ–∂–∏–º: –ü–†–û–í–ï–†–ö–ê –ö–ê–ñ–î–û–ì–û –¢–ò–ö–ê")
            logger.info("=" * 60)
            
            # ‚ú® –°–æ–∑–¥–∞–µ–º –û–î–ò–ù event loop –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self._ensure_event_loop()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket
            self.ws = WebSocket(testnet=False, channel_type="linear")
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä
            self.ws.ticker_stream(self.symbol, self.handle_message)
            
            # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while not self.should_stop:
                await asyncio.sleep(0.1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
            
            logger.info("\n" + "=" * 60)
            logger.info(f"üèÅ –°–¢–†–ê–¢–ï–ì–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.ticks_processed} —Ç–∏–∫–æ–≤")
            logger.info(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {self.peak_profit_percent:.2f}%")
            logger.info("=" * 60)
            
        except Exception as e:
            logger.error(f"[{self.symbol}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            
            chat_ids = await get_all_subscribed_users()
            await self.safe_send_notification(
                notify_strategy_error,
                chat_ids, TELEGRAM_BOT_TOKEN, self.symbol,
                str(e), "SHORT_AVERAGING"
            )
            
            raise
        
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º event loop
            if self.loop and not self.loop.is_closed():
                self.loop.close()
                self.loop = None
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
            if self.ws:
                try:
                    self.ws.exit()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WS: {e}")
                finally:
                    self.ws = None


async def run_short_averaging_strategy(
    symbol: str,
    usdt_amount: float = DEFAULT_USDT_AMOUNT,
    averaging_percent: float = DEFAULT_AVERAGING_PERCENT,
    initial_tp_percent: float = DEFAULT_INITIAL_TP_PERCENT,
    breakeven_step: float = DEFAULT_BREAKEVEN_STEP,
    stop_loss_percent: float = DEFAULT_STOP_LOSS_PERCENT,
    use_demo: bool = True
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —à–æ—Ä—Ç —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        usdt_amount: –°—É–º–º–∞ –≤ USDT
        averaging_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        initial_tp_percent: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        breakeven_step: –®–∞–≥ –±–µ–∑—É–±—ã—Ç–∫–∞
        stop_loss_percent: –°—Ç–æ–ø-–ª–æ—Å—Å
        use_demo: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-—Å—á–µ—Ç
    """
    strategy = ShortAveragingStrategyCelery(
        symbol=symbol,
        usdt_amount=usdt_amount,
        averaging_percent=averaging_percent,
        initial_tp_percent=initial_tp_percent,
        breakeven_step=breakeven_step,
        stop_loss_percent=stop_loss_percent,
        use_demo=use_demo
    )
    
    await strategy.run()

