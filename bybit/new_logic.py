import asyncio
import time
from pybit.unified_trading import HTTP, WebSocket
from utils.send_tg_message import send_message_to_telegram
from logger_config import setup_logger
from config import API_KEY, API_SECRET, TELEGRAM_BOT_TOKEN
from database import get_all_subscribed_users, save_completed_transaction

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
key = API_KEY
secret = API_SECRET

if not key or not secret:
    logger.error("API_KEY –∏–ª–∏ API_SECRET –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
session = HTTP(api_key=key, api_secret=secret, testnet=False, recv_window=60000)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API ---

def get_instrument_info(symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ (—Ç–∏–∫–µ—Ä—ã, —à–∞–≥–∏ –∏ —Ç.–¥.)."""
    try:
        response = session.get_instruments_info(category="linear", symbol=symbol)
        if response.get("retCode") == 0:
            return response.get("result", {}).get("list", [{}])[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è {symbol}: {e}")
    return {}

def get_qty_limits(instrument_info):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —à–∞–≥ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (qty)."""
    lot_size_filter = instrument_info.get("lotSizeFilter", {})
    min_qty = float(lot_size_filter.get("minOrderQty", "1"))
    step_size = float(lot_size_filter.get("qtyStep", "1"))
    return min_qty, step_size

def get_price_tick(instrument_info):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —à–∞–≥ —Ü–µ–Ω—ã (tick size) –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è."""
    price_filter = instrument_info.get("priceFilter", {})
    tick_size = float(price_filter.get("tickSize", "0.0001"))
    return tick_size

def round_qty(qty, step_size):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (qty) –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –±–∏—Ä–∂–µ–π —à–∞–≥–∞."""
    if 'e' in str(step_size): # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏ (e.g., 1e-5)
        precision = abs(int(str(step_size).split('e-')[1]))
    else:
        precision = len(str(step_size).split('.')[1]) if '.' in str(step_size) else 0
    return round(qty - (qty % step_size), precision)

async def open_short(symbol, dollar_value, chat_ids, instrument_info):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π —à–æ—Ä—Ç-–æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö."""
    try:
        response = session.get_tickers(category="linear", symbol=symbol)
        entry_price = float(response['result']['list'][0]['lastPrice'])
        if entry_price <= 0:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
        return None

    min_qty, step_size = get_qty_limits(instrument_info)
    qty = dollar_value / entry_price
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —à–∞–≥–∞ qty
    qty = round_qty(qty, step_size)
    if qty < min_qty:
        qty = min_qty
        logger.info(f"–†–∞—Å—á–µ—Ç–Ω–æ–µ qty ({dollar_value / entry_price}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ qty: {qty}")

    order_value = qty * entry_price
    if order_value < 5.0: # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit ~5 USDT
        logger.warning(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ ({order_value:.2f} USDT) –º–µ–Ω—å—à–µ 5 USDT. –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å qty.")
        qty = round_qty(5.0 / entry_price, step_size) + step_size # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ
        logger.info(f"Qty –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {qty} –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞.")
        await send_message_to_telegram(
            f"Qty –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {qty} –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞ 5 USDT.",
            chat_ids, TELEGRAM_BOT_TOKEN
        )

    try:
        response = session.place_order(
            category="linear",
            symbol=symbol,
            side="Sell",
            orderType="Market",
            qty=str(qty),
        )
        if response.get("retCode") == 0:
            logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—è {symbol} qty={qty} –ø–æ ~—Ü–µ–Ω–µ {entry_price}")
            await send_message_to_telegram(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—è {symbol} qty={qty} –ø–æ ~—Ü–µ–Ω–µ {entry_price}", chat_ids, TELEGRAM_BOT_TOKEN)
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            await asyncio.sleep(2)
            pos_info = session.get_positions(category="linear", symbol=symbol)
            actual_entry_price = float(pos_info['result']['list'][0]['avgPrice'])
            return actual_entry_price, qty
        else:
            raise Exception(response.get('retMsg'))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await send_message_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}", chat_ids, TELEGRAM_BOT_TOKEN)
        return None

async def set_take_profit(symbol, qty, price, tick_size, chat_ids):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏."""
    # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
    price_rounded = round(round(price / tick_size) * tick_size, 8)
    try:
        response = session.place_order(
            category="linear",
            symbol=symbol,
            side="Buy",
            orderType="Limit",
            qty=str(qty),
            price=str(price_rounded),
            reduceOnly=True
        )
        if response.get("retCode") == 0:
            logger.info(f"‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {price_rounded}")
            await send_message_to_telegram(f"‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {price_rounded}", chat_ids, TELEGRAM_BOT_TOKEN)
        else:
            raise Exception(response.get('retMsg'))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {e}")
        await send_message_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {e}", chat_ids, TELEGRAM_BOT_TOKEN)

async def set_stop_loss(symbol, qty, stop_price, tick_size, chat_ids):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤."""
    # –¶–µ–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∞
    stop_price_rounded = round(round(stop_price / tick_size) * tick_size, 8)
    try:
        response = session.place_order(
            category="linear",
            symbol=symbol,
            side="Buy",
            orderType="Market", # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ä—ã–Ω–∫—É –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏
            qty=str(qty),
            triggerPrice=str(stop_price_rounded),
            triggerDirection=1, # 1: —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç (–¥–ª—è —Å—Ç–æ–ø–∞ –Ω–∞ —à–æ—Ä—Ç–µ)
            reduceOnly=True
        )
        if response.get("retCode") == 0:
            logger.info(f"‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {stop_price_rounded}")
            await send_message_to_telegram(f"‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {stop_price_rounded}", chat_ids, TELEGRAM_BOT_TOKEN)
        else:
            raise Exception(response.get('retMsg'))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
        await send_message_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}", chat_ids, TELEGRAM_BOT_TOKEN)


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---

async def short_strategy(symbol):
    chat_ids = await get_all_subscribed_users()
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")

    instrument_info = get_instrument_info(symbol)
    if not instrument_info:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {symbol}. –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return
    
    tick_size = get_price_tick(instrument_info)

    # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —à–æ—Ä—Ç-–ø–æ–∑–∏—Ü–∏—é –Ω–∞ $5")
    entry1 = await open_short(symbol, 5, chat_ids, instrument_info)
    if not entry1:
        return
    entry_price_1, qty1 = entry1
    
    averaging_price = entry_price_1 * 1.2
    await send_message_to_telegram(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –¥–æ {averaging_price:.4f}", chat_ids, TELEGRAM_BOT_TOKEN)

    # 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Queue
    price_queue = asyncio.Queue()

    def price_callback(msg):
        for ticker in msg.get('data', []):
            if ticker.get('symbol') == symbol:
                last_price = float(ticker.get('lastPrice'))
                try:
                    price_queue.put_nowait(last_price)
                except asyncio.QueueFull:
                    pass

    ws_price = WebSocket(testnet=False, channel_type="linear")
    ws_price.ticker_stream(callback=price_callback, symbol=symbol)
    logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è.")

    last_logged_time = time.time()
    usrednenie_done = False
    current_price = entry_price_1
    
    try:
        while not usrednenie_done:
            try:
                current_price = await asyncio.wait_for(price_queue.get(), timeout=20.0)
                if time.time() - last_logged_time > 10.0:
                    percent_change = ((current_price - entry_price_1) / entry_price_1) * 100
                    logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞={entry_price_1}, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞={current_price}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ={percent_change:.2f}%")
                    last_logged_time = time.time()
                
                if current_price >= averaging_price:
                    logger.info(f"üìà –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {current_price}")
                    usrednenie_done = True
                    break
            except asyncio.TimeoutError:
                logger.warning("‚ùóÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                ws_price.exit()
                await asyncio.sleep(1)
                ws_price = WebSocket(testnet=False, channel_type="linear")
                ws_price.ticker_stream(callback=price_callback, symbol=symbol)
                logger.info("üîÑ WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã.")
        ws_price.exit()

    if not usrednenie_done:
        return

    # 3. –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
    await send_message_to_telegram(f"–¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 20%. –£—Å—Ä–µ–¥–Ω—è–µ–º! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}", chat_ids, TELEGRAM_BOT_TOKEN)
    entry2 = await open_short(symbol, 5, chat_ids, instrument_info)
    if not entry2:
        return
        
    entry_price_2, qty2 = entry2
    total_qty = qty1 + qty2
    
    avg_entry_price = (entry_price_1 * qty1 + entry_price_2 * qty2) / total_qty
    
    # 4. –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ
    session.cancel_all_orders(category="linear", symbol=symbol)
    logger.info("–û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö.")
    await asyncio.sleep(1)

    stop_loss_price = avg_entry_price * 1.10 # –°—Ç–æ–ø-–ª–æ—Å—Å 10% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
    take_profit_price = avg_entry_price * 0.85 # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 15% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
    
    await set_stop_loss(symbol, total_qty, stop_loss_price, tick_size, chat_ids)
    await set_take_profit(symbol, total_qty, take_profit_price, tick_size, chat_ids)
    
    # 5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
    close_event = asyncio.Event()
    close_info = {}
    loop = asyncio.get_running_loop()
    
    def order_callback(msg):
        for exec_data in msg.get('data', []):
            if exec_data.get('symbol') == symbol and exec_data.get('execType') == 'Trade' and exec_data.get('reduceOnly'):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {exec_data}")
                close_info['close_price'] = float(exec_data['execPrice'])
                close_info['pnl'] = float(exec_data.get('closedPnl', 0))
                loop.call_soon_threadsafe(close_event.set)

    ws_order = WebSocket(testnet=False, channel_type="private") 
    ws_order.execution_stream(callback=order_callback) 
    logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ (TP/SL).")

    try:
        await asyncio.wait_for(close_event.wait(), timeout=86400) # –ñ–¥–µ–º —Å—É—Ç–∫–∏
    except asyncio.TimeoutError:
        logger.error("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
        session.place_order(category="linear", symbol=symbol, side="Buy", orderType="Market", qty=str(total_qty), reduceOnly=True)
    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤.")
        ws_order.exit()

    # 6. –†–∞—Å—á–µ—Ç PnL –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if not close_info:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏.")
        return

    close_price = close_info['close_price']
    pnl = close_info['pnl']
    status = 'profit' if pnl > 0 else 'loss'
    close_type = '–ø—Ä–∏–±—ã–ª—å' if pnl > 0 else '—É–±—ã—Ç–æ–∫'

    message = f"üèÅ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ü–µ–Ω–µ: {close_price}\n–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {avg_entry_price:.4f}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {close_type} –Ω–∞ {pnl:.4f} USDT."
    logger.info(message)
    await send_message_to_telegram(message, chat_ids, TELEGRAM_BOT_TOKEN)
    
    await save_completed_transaction({
        'symbol': symbol, 'avg_entry_price': avg_entry_price, 'total_qty': total_qty,
        'close_price': close_price, 'status': status, 'pnl': pnl, 'timestamp': time.time()
    })

if __name__ == "__main__":
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏–º–≤–æ–ª —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Bybit (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
    symbol = "Fragusdt"
    try:
        asyncio.run(short_strategy(symbol.upper()))
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")