from pybit.unified_trading import HTTP
from config import DEMO_API_KEY, DEMO_API_SECRET
import time

session = HTTP(
    api_key=DEMO_API_KEY,
    api_secret=DEMO_API_SECRET,
    testnet=False,
    recv_window=60000,
    demo=True,
)

def get_all_orders():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
    try:
        response = session.get_open_orders(
            category="linear",
            settleCoin="USDT",  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            limit=50
        )
        orders = response.get('result', {}).get('list', [])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if orders:
            print(f"–ù–∞–π–¥–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤:")
            order_types = set()
            for order in orders:
                order_types.add(order.get('orderType', 'Unknown'))
            for order_type in order_types:
                print(f"  - {order_type}")
        
        return orders
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return []

def get_all_positions():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        response = session.get_positions(
            category="linear",
            settleCoin="USDT"
        )
        return response.get('result', {}).get('list', [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        return []

def cancel_all_orders():
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
    orders = get_all_orders()
    
    if not orders:
        print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
    
    for order in orders:
        try:
            symbol = order['symbol']
            order_id = order['orderId']
            order_type = order.get('orderType', 'Unknown')
            side = order.get('side', 'Unknown')
            qty = order.get('qty', 'Unknown')
            price = order.get('price', 'Market')
            
            response = session.cancel_order(
                category="linear",
                symbol=symbol,
                orderId=order_id
            )
            
            if response.get('retCode') == 0:
                print(f"‚úÖ {order_type} –æ—Ä–¥–µ—Ä {side} {qty} {symbol} @ {price} –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã {order_type} –æ—Ä–¥–µ—Ä–∞ {order_id}: {response.get('retMsg')}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ {order.get('orderId', 'unknown')}: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.1)

def close_all_positions():
    """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
    positions = get_all_positions()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª—å—à–µ 0
    active_positions = [pos for pos in positions if float(pos['size']) > 0]
    
    if not active_positions:
        print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(active_positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    
    for position in active_positions:
        try:
            symbol = position['symbol']
            side = position['side']
            size = position['size']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = "Sell" if side == "Buy" else "Buy"
            
            response = session.place_order(
                category="linear",
                symbol=symbol,
                side=close_side,
                orderType="Market",
                qty=size,
                reduceOnly=True
            )
            
            if response.get('retCode') == 0:
                print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {side} {size} {symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {response.get('retMsg')}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {position.get('symbol', 'unknown')}: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.1)

def get_orders_by_symbol(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        response = session.get_open_orders(
            category="linear",
            symbol=symbol,
            settleCoin="USDT",
            limit=50
        )
        return response.get('result', {}).get('list', [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
        return []

def get_position_by_symbol(symbol):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        response = session.get_positions(
            category="linear",
            symbol=symbol,
            settleCoin="USDT"
        )
        positions = response.get('result', {}).get('list', [])
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 0
        for pos in positions:
            if float(pos['size']) > 0:
                return pos
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
        return None

def cancel_orders_by_symbol(symbol):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    orders = get_orders_by_symbol(symbol)
    
    if not orders:
        print(f"–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
    
    for order in orders:
        try:
            order_id = order['orderId']
            order_type = order.get('orderType', 'Unknown')
            side = order.get('side', 'Unknown')
            qty = order.get('qty', 'Unknown')
            price = order.get('price', 'Market')
            
            response = session.cancel_order(
                category="linear",
                symbol=symbol,
                orderId=order_id
            )
            
            if response.get('retCode') == 0:
                print(f"‚úÖ {order_type} –æ—Ä–¥–µ—Ä {side} {qty} {symbol} @ {price} –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã {order_type} –æ—Ä–¥–µ—Ä–∞ {order_id}: {response.get('retMsg')}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ {order.get('orderId', 'unknown')}: {e}")
        
        time.sleep(0.1)

def close_position_by_symbol(symbol):
    """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    position = get_position_by_symbol(symbol)
    
    if not position:
        print(f"–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}")
        return
    
    try:
        side = position['side']
        size = position['size']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        close_side = "Sell" if side == "Buy" else "Buy"
        
        response = session.place_order(
            category="linear",
            symbol=symbol,
            side=close_side,
            orderType="Market",
            qty=size,
            reduceOnly=True
        )
        
        if response.get('retCode') == 0:
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {side} {size} {symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {response.get('retMsg')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")

def stop_trading_by_symbol(symbol):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    print(f"üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}...")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
    print(f"1. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}...")
    cancel_orders_by_symbol(symbol)
    
    print("\n" + "=" * 50)
    
    # –ó–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã
    print(f"2. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è {symbol}...")
    close_position_by_symbol(symbol)
    
    print("\n" + "=" * 50)
    print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def stop_all_trading():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    print("üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
    print("1. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞...")
    cancel_all_orders()
    
    print("\n" + "=" * 50)
    
    # –ó–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
    print("2. –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
    close_all_positions()
    
    print("\n" + "=" * 50)
    print("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    
    # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Ç–æ—Ä–≥–æ–≤–ª—é
    stop_all_trading()
    
    # 2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
    # stop_trading_by_symbol("BTCUSDT")
    
    # 3. –¢–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
    # cancel_orders_by_symbol("ETHUSDT")
    
    # 4. –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
    # close_position_by_symbol("ADAUSDT")