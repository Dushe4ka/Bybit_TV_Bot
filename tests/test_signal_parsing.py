#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.signal_parser import parse_signal, process_signal

def test_signal_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    test_signals = [
        # –ù–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å Code
        "ALUUSDT.P: Code 1 SHORT signal!",
        "ALUUSDT.P: Code 2 SHORT signal!",
        "BTCUSDT: Code 1 SHORT signal!",
        "ETHUSDT: Code 2 SHORT signal!",
        
        # JSON —Ñ–æ—Ä–º–∞—Ç—ã
        '{"text": "ALUUSDT.P: Code 1 SHORT signal!"}',
        '{"text": "BTCUSDT: Code 2 SHORT signal!"}',
        '{"text": "ETHUSDT.P: Code 1 SHORT signal!"}',
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        "Invalid signal format",
        "BTCUSDT: UNKNOWN signal!",
        "BTCUSDT: Code 3 SHORT signal!",
        "BTCUSDT: Code 1 UNKNOWN signal!"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n")
    
    for i, signal in enumerate(test_signals, 1):
        print(f"–¢–µ—Å—Ç {i}: {signal}")
        
        # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
        symbol, signal_type = parse_signal(signal)
        
        if symbol and signal_type:
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ –†–ê–°–ü–û–ó–ù–ê–ù")
            print(f"   –°–∏–º–≤–æ–ª: {symbol}")
            print(f"   –¢–∏–ø: {signal_type}")
        else:
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –ù–ï –†–ê–°–ü–û–ó–ù–ê–ù")
        
        print()
    
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_process_signal():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ process_signal"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    test_signals = [
        "ALUUSDT.P: Code 1 SHORT signal!",
        "ALUUSDT.P: Code 2 SHORT signal!",
        "BTCUSDT: Code 1 SHORT signal!",
        "ETHUSDT: Code 2 SHORT signal!"
    ]
    
    for i, signal in enumerate(test_signals, 1):
        print(f"–¢–µ—Å—Ç {i}: {signal}")
        
        # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
        symbol, signal_type, strategy = process_signal(signal)
        
        if symbol and signal_type and strategy:
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–†–ê–ë–û–¢–ê–ù")
            print(f"   –°–∏–º–≤–æ–ª: {symbol}")
            print(f"   –¢–∏–ø: {signal_type}")
            print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")
        else:
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
        
        print()
    
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_signal_parsing()
    test_process_signal() 