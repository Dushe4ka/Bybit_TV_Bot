from fastapi import FastAPI, Request, BackgroundTasks, HTTPException
from contextlib import asynccontextmanager
from celery_app.tasks.bybit_tasks import (
    run_strategy_by_signal, 
    run_short_strategy, 
    run_strong_short_strategy, 
    run_weak_short_strategy,
    run_short_averaging_strategy_task,
    stop_strategy_monitoring, 
    get_active_positions
)
from utils.send_tg_message import send_message_to_telegram
from utils.signal_parser import process_signal
from database import get_all_subscribed_users
from config import TELEGRAM_BOT_TOKEN, NGROK_TOKEN
import asyncio
import re
from logger_config import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ logger
logger = setup_logger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
if not TELEGRAM_BOT_TOKEN:
    logger.warning("[CONFIG] TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

public_url = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    global public_url
    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok, –µ—Å–ª–∏ public_url –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    if public_url is None:
        try:
            from pyngrok import ngrok
            ngrok.set_auth_token(NGROK_TOKEN)
            ngrok_tunnel = ngrok.connect(9000, bind_tls=True)
            public_url = ngrok_tunnel.public_url
            logger.info(f"[NGROK] –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {public_url}")
        except Exception as e:
            logger.error(f"[NGROK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ngrok: {e}")
            public_url = None
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        users = await get_all_subscribed_users()
        logger.info(f"[STARTUP] –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"[STARTUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
        users = []
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    endpoints = []
    for route in app.routes:
        if hasattr(route, 'path') and hasattr(route, 'methods'):
            if not route.path.startswith("/docs") and not route.path.startswith("/openapi") and not route.path.startswith("/redoc"):
                methods = ','.join(route.methods)
                if public_url:
                    endpoints.append(f"{public_url}{route.path} [{methods}]")
                else:
                    endpoints.append(f"/local{route.path} [{methods}]")
    
    if public_url:
        msg = (
            f"üöÄ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n"
            f"–ü—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å: {public_url}\n\n"
            f"–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:\n" + '\n'.join(endpoints)
        )
    else:
        msg = (
            "‚ö†Ô∏è FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ngrok –Ω–µ –∑–∞–ø—É—â–µ–Ω).\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ngrok!\n\n"
            f"–õ–æ–∫–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:\n" + '\n'.join(endpoints)
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞
    if TELEGRAM_BOT_TOKEN and users:
        try:
            await send_message_to_telegram(msg, users, TELEGRAM_BOT_TOKEN)
            logger.info(f"[STARTUP] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        except Exception as e:
            logger.error(f"[STARTUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
    else:
        if not TELEGRAM_BOT_TOKEN:
            logger.warning("[STARTUP] TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        if not users:
            logger.warning("[STARTUP] –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    yield

app = FastAPI(lifespan=lifespan)

@app.post("/monitor")
async def monitor(request: Request):
    try:
        data = await request.json()
    except Exception:
        body = await request.body()
        try:
            text = body.decode("utf-8").strip()
        except Exception:
            text = str(body)
        if text:
            data = {"text": text}
        else:
            logger.error("[MONITOR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π JSON/text")
    symbol = data.get('text') or data.get('ticker')
    logger.info(f"[MONITOR] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")
    users = await get_all_subscribed_users()
    await send_message_to_telegram(f"MONITOR: {data}", users, TELEGRAM_BOT_TOKEN)
    logger.info(f"[MONITOR] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º. –°–∏–º–≤–æ–ª: {symbol}")
    return {"received": data, "symbol": symbol}

@app.post("/webhook")
async def webhook(request: Request, background_tasks: BackgroundTasks):
    try:
        data = await request.json()
    except Exception:
        body = await request.body()
        try:
            text = body.decode("utf-8").strip()
        except Exception:
            text = str(body)
        if text:
            data = {"text": text}
        else:
            logger.error("[WEBHOOK] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π JSON/text")
    
    signal_text = data.get('text') or data.get('ticker')
    if signal_text:
        signal_text = signal_text.strip().strip("'\"")
    
    logger.info(f"[WEBHOOK] –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}")
    if not signal_text:
        logger.error("[WEBHOOK] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª –≤ payload (–æ–∂–∏–¥–∞–ª—Å—è 'text' –∏–ª–∏ 'ticker')")
        return {"error": "No signal in payload (expected 'text' or 'ticker')"}
    
    # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    symbol, signal_type, strategy_function = process_signal(signal_text)
    
    if not symbol or not signal_type or not strategy_function:
        logger.error(f"[WEBHOOK] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª: {signal_text}")
        return {"error": f"Invalid signal format: {signal_text}"}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–∞
    result = run_strategy_by_signal.delay(signal_text)
    logger.info(f"[WEBHOOK] –ó–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_function} –¥–ª—è {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Celery")
    return {
        "status": "started", 
        "symbol": symbol, 
        "signal_type": signal_type,
        "strategy": strategy_function,
        "task_id": result.id
    }

@app.post("/webhook_legacy")
async def webhook_legacy(request: Request, background_tasks: BackgroundTasks):
    """–õ–µ–≥–∞—Å–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        data = await request.json()
    except Exception:
        body = await request.body()
        try:
            text = body.decode("utf-8").strip()
        except Exception:
            text = str(body)
        if text:
            data = {"text": text}
        else:
            logger.error("[WEBHOOK_LEGACY] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π JSON/text")
    
    symbol = data.get('text') or data.get('ticker')
    if symbol:
        symbol = symbol.strip().strip("'\"")
    
    logger.info(f"[WEBHOOK_LEGACY] –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}")
    if not symbol:
        logger.error("[WEBHOOK_LEGACY] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª –≤ payload")
        return {"error": "No symbol in payload (expected 'text' or 'ticker')"}
    

    
    run_short_strategy.delay(symbol)
    logger.info(f"[WEBHOOK_LEGACY] –ó–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ short_strategy –¥–ª—è {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Celery")
    return {"status": "started", "symbol": symbol}

@app.post("/strong_short")
async def strong_short(request: Request):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç STRONG SHORT —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
    try:
        data = await request.json()
    except Exception:
        body = await request.body()
        try:
            text = body.decode("utf-8").strip()
        except Exception:
            text = str(body)
        if text:
            data = {"text": text}
        else:
            logger.error("[STRONG_SHORT] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π JSON/text")
    
    symbol = data.get('text') or data.get('ticker')
    if symbol:
        symbol = symbol.strip().strip("'\"")
    
    if not symbol:
        logger.error("[STRONG_SHORT] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª –≤ payload")
        return {"error": "No symbol in payload (expected 'text' or 'ticker')"}
    

    
    result = run_strong_short_strategy.delay(symbol)
    logger.info(f"[STRONG_SHORT] –ó–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ STRONG SHORT —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Celery")
    return {"status": "started", "symbol": symbol, "strategy": "strong_short", "task_id": result.id}

@app.post("/weak_short")
async def weak_short(request: Request):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç WEAK SHORT —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
    try:
        data = await request.json()
    except Exception:
        body = await request.body()
        try:
            text = body.decode("utf-8").strip()
        except Exception:
            text = str(body)
        if text:
            data = {"text": text}
        else:
            logger.error("[WEAK_SHORT] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π JSON/text")
    
    symbol = data.get('text') or data.get('ticker')
    if symbol:
        symbol = symbol.strip().strip("'\"")
    
    if not symbol:
        logger.error("[WEAK_SHORT] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª –≤ payload")
        return {"error": "No symbol in payload (expected 'text' or 'ticker')"}
    

    
    result = run_weak_short_strategy.delay(symbol)
    logger.info(f"[WEAK_SHORT] –ó–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ WEAK SHORT —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Celery")
    return {"status": "started", "symbol": symbol, "strategy": "weak_short", "task_id": result.id}

@app.post("/short_averaging")
async def short_averaging(request: Request):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç SHORT —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º"""
    try:
        data = await request.json()
    except Exception:
        body = await request.body()
        try:
            text = body.decode("utf-8").strip()
        except Exception:
            text = str(body)
        if text:
            data = {"text": text}
        else:
            logger.error("[SHORT_AVERAGING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π JSON/text")
    
    symbol = data.get('text') or data.get('ticker') or data.get('symbol')
    if symbol:
        symbol = symbol.strip().strip("'\"")
    
    if not symbol:
        logger.error("[SHORT_AVERAGING] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª –≤ payload")
        return {"error": "No symbol in payload (expected 'text', 'ticker' or 'symbol')"}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    usdt_amount = float(data.get('usdt_amount', 100))
    averaging_percent = float(data.get('averaging_percent', 10.0))
    initial_tp_percent = float(data.get('initial_tp_percent', 3.0))
    breakeven_step = float(data.get('breakeven_step', 2.0))
    stop_loss_percent = float(data.get('stop_loss_percent', 15.0))
    use_demo = data.get('use_demo', True)
    
    logger.info(
        f"[SHORT_AVERAGING] –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è {symbol} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: "
        f"USDT={usdt_amount}, Avg={averaging_percent}%, TP={initial_tp_percent}%, "
        f"BE={breakeven_step}%, SL={stop_loss_percent}%"
    )
    
    result = run_short_averaging_strategy_task.delay(
        symbol=symbol,
        usdt_amount=usdt_amount,
        averaging_percent=averaging_percent,
        initial_tp_percent=initial_tp_percent,
        breakeven_step=breakeven_step,
        stop_loss_percent=stop_loss_percent,
        use_demo=use_demo
    )
    
    logger.info(f"[SHORT_AVERAGING] –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Celery –¥–ª—è {symbol}, task_id: {result.id}")
    return {
        "status": "started", 
        "symbol": symbol, 
        "strategy": "short_averaging",
        "task_id": result.id,
        "parameters": {
            "usdt_amount": usdt_amount,
            "averaging_percent": averaging_percent,
            "initial_tp_percent": initial_tp_percent,
            "breakeven_step": breakeven_step,
            "stop_loss_percent": stop_loss_percent,
            "use_demo": use_demo
        }
    }

@app.post("/stop_monitoring")
async def stop_monitoring(request: Request):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    try:
        data = await request.json()
    except Exception:
        body = await request.body()
        try:
            text = body.decode("utf-8").strip()
        except Exception:
            text = str(body)
        if text:
            data = {"text": text}
        else:
            logger.error("[STOP_MONITORING] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π JSON/text")
    
    symbol = data.get('text') or data.get('ticker')
    if symbol:
        symbol = symbol.strip().strip("'\"")
    
    if not symbol:
        logger.error("[STOP_MONITORING] –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª –≤ payload")
        return {"error": "No symbol in payload (expected 'text' or 'ticker')"}
    

    
    result = stop_strategy_monitoring.delay(symbol)
    logger.info(f"[STOP_MONITORING] –ó–∞–¥–∞—á–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Celery")
    return {"status": "stopping", "symbol": symbol, "task_id": result.id}

@app.get("/active_positions")
async def get_positions():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    result = get_active_positions.delay()
    logger.info("[ACTIVE_POSITIONS] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Celery")
    return {"status": "requested", "task_id": result.id}

@app.get("/health")
def health():
    logger.info("[HEALTH] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI")
    return {"status": "ok"}

if __name__ == "__main__":
    import uvicorn
    logger.info("[START] –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ uvicorn –Ω–∞ 0.0.0.0:8000")
    uvicorn.run("fastapi_server:app", host="0.0.0.0", port=9000, reload=False)