#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö Celery worker'–æ–≤
"""
from celery_app import celery_app
import sys

def stop_workers():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Celery worker'—ã"""
    try:
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ Celery worker'—ã...")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É worker'–æ–≤
        try:
            stats = celery_app.control.inspect().stats()
            if stats:
                print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö worker'–æ–≤: {len(stats)}")
                for worker_name in stats.keys():
                    print(f"   - {worker_name}")
            else:
                print("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ worker'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ worker'–æ–≤: {e}")
            print("   –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö worker'–æ–≤
        print("\nüõë –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É shutdown...")
        celery_app.control.shutdown()
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        
        print("\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è worker'–æ–≤...")
        print("\nüí° –ï—Å–ª–∏ worker'—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:")
        print("   Windows: taskkill /F /IM celery.exe")
        print("   Linux:   pkill -9 -f 'celery worker'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ worker'–æ–≤: {e}")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É:")
        print("   celery -A celery_app control shutdown")
        import traceback
        traceback.print_exc()
        sys.exit(1)

def show_active_tasks():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    try:
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏...")
        
        i = celery_app.control.inspect()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active = i.active()
        if active:
            print("\nüîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for worker, tasks in active.items():
                if tasks:
                    print(f"\n  Worker: {worker}")
                    for task in tasks:
                        print(f"    - {task.get('name')} (ID: {task.get('id')})")
        else:
            print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        # –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        reserved = i.reserved()
        if reserved:
            print("\nüìå –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for worker, tasks in reserved.items():
                if tasks:
                    print(f"\n  Worker: {worker}")
                    for task in tasks:
                        print(f"    - {task.get('name')} (ID: {task.get('id')})")
        else:
            print("   –ù–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö: {e}")

if __name__ == "__main__":
    print("=" * 60)
    print("üõë –û–°–¢–ê–ù–û–í–ö–ê CELERY WORKER'–û–í")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    show_active_tasks()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if len(sys.argv) > 1 and sys.argv[1] == '-f':
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        stop_workers()
    else:
        print("\n‚ö†Ô∏è –≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ worker'—ã –∏ –ø—Ä–µ—Ä–≤–µ—Ç –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏!")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()
        if response in ['yes', 'y', '–¥–∞', '–¥']:
            stop_workers()
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            sys.exit(0)


